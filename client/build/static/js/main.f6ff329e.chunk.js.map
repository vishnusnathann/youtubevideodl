{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","url","setUrl","videoList","setVideoList","clicked","setClicked","loading","useEffect","className","src","onSubmit","e","preventDefault","axios","get","then","res","console","log","data","formats","sendURL","type","placeholder","onChange","target","value","required","length","size","color","margin","style","height","map","item","index","qualityLabel","mimeType","toString","split","href","download","onClick","window","location","downLoadVideo","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SAuGeA,MAhGf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIiBN,oBAAS,GAJ1B,mBAINO,EAJM,KA6Bb,OA7Ba,KA0BbC,qBAAU,cAEP,IAED,yBAAKC,UAAU,OACb,gCACE,yBAAKA,UAAU,QACb,yBAAKC,IAAI,iBAGb,yBAAKD,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UAAUC,IAAI,kBAC/B,mDAIA,0BAAMC,SAAU,SAACC,GAAD,OAjCX,SAACA,GACdA,EAAEC,iBACFP,GAAW,GACXQ,IAAMC,IAAN,wBAA2Bd,IAAOe,MAAK,SAAAC,GACrCC,QAAQC,IAAIF,GACZb,EAAaa,EAAIG,KAAKC,YA4BKC,CAAQV,KAC3B,2BAAOW,KAAK,OAAOC,YAAY,+DACzBC,SAAU,SAACb,GAAD,OAxCZ,SAACA,GACfM,QAAQC,IAAIP,EAAEc,OAAOC,OACrBzB,EAAOU,EAAEc,OAAOC,OAsCeF,CAASb,IAAIgB,UAAQ,IAC1C,2BAAOnB,UAAU,gBAAgBc,KAAK,SAASI,MAAM,aAGxC,GAATtB,EACCF,GAA+B,GAAlBA,EAAU0B,OACpB,yBAAKpB,UAAU,UACX,kBAAC,IAAD,CACEqB,KAAM,IACNC,MAAO,UACPxB,QAASA,EACTyB,OAAQ,KAId,kBAAC,aAAD,CAAYC,MAAO,CAACC,OAAO,wBAE3B,yBAAKzB,UAAU,4BAGXN,EAAUgC,KAAI,SAACC,EAAKC,GAElB,GAAGD,EAAKE,aAAa,CACnB,IAAIf,EAAKa,EAAKG,SAASC,WAAWC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC3D,OACE,yBAAKhC,UAAU,kBACb,0BAAMA,UAAU,QAAQc,EAAxB,KAAgCa,EAAKE,cACrC,uBAAG7B,UAAU,WAAWiC,KAAMN,EAAKnC,IAAKyB,OAAO,SAASiB,UAAQ,EAACC,QAAS,kBAnDpF,SAAC3C,GACrB4C,OAAOC,SAASJ,KAAKzC,EAkDuF8C,CAAcX,EAAKnC,OAAjG,aAKJ,OAAO,UAOd,QC/EH+C,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.f6ff329e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { css } from \"@emotion/core\";\nimport PacmanLoader from \"react-spinners/ClipLoader\"\n\nfunction App() {\n  const [url, setUrl] = useState(\"\");\n  const [videoList, setVideoList] = useState([]);\n  const [clicked, setClicked] = useState(false);\n  const [loading, setLoading] = useState(true)\n  const onChange= (e) =>{\n    console.log(e.target.value);\n    setUrl(e.target.value);\n  }\n\n  const sendURL =(e)=>{\n    e.preventDefault();\n    setClicked(true);\n    axios.get(`/videourl?URL=${url}`).then(res=>{\n      console.log(res);\n      setVideoList(res.data.formats);\n      \n    })\n    // window.location.href=`http://127.0.0.1:5000/download?URL=${url}`;\n  }\n\n  const downLoadVideo = (url) =>{\n    window.location.href=url;\n  }\n\n\n  useEffect(() => {\n    \n  }, [])\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"logo\">\n          <img src=\"./logo.png\"/>\n        </div>\n      </header>\n      <div className=\"container\">\n          <div className=\"details\">\n              <img className=\"youtube\" src=\"./youtube.png\"/>\n            <h2>\n                Youtube downloader\n            </h2>\n          </div>\n            <form onSubmit={(e)=>sendURL(e)}>\n              <input type=\"text\" placeholder=\"  Video URL e.g. https://www.youtube.com/watch?v=MtN1YnoL46Q\"\n                    onChange={(e)=>onChange(e)} required/>\n              <input className=\"submit-button\" type=\"submit\" value=\"Convert\" />\n            </form>\n              {\n                  clicked==true?\n                  (videoList && videoList.length==0 )?\n                      <div className=\"loader\">\n                          <PacmanLoader\n                            size={100}\n                            color={\"#D9271D\"}\n                            loading={loading}\n                            margin={2}\n                          />\n                      </div>\n                      :\n                      <Scrollbars style={{height:\"calc(100vh - 270px)\"}}> \n            \n                      <div className=\"download-label-container\">\n                      \n                        {\n                          videoList.map((item,index) => {\n                            \n                            if(item.qualityLabel){\n                              let type=item.mimeType.toString().split(\";\")[0].split(\"/\")[1];\n                              return(\n                                <div className=\"download-label\">\n                                  <span className=\"type\">{type}  {item.qualityLabel}</span>\n                                  <a className=\"download\" href={item.url} target=\"_blank\" download onClick={()=>downLoadVideo(item.url)}>Download</a>\n                                </div>\n                              )\n                            }\n                            else\n                              return null;\n                            \n                          })\n                        }\n                      \n                      </div>\n                      </Scrollbars>\n                      :null\n                    \n              }\n            \n            \n  \n            \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}